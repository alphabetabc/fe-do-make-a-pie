const CURSOR_COLOR="#f80",CURSOR_COLOR2="#0cf";function getData(){let t=Date.now(),e=Math.random()*50+300;return Array(100).fill(0).map(()=>[t+=1e5,e+=Math.random()*25-10])}function getTimeStr(t){const e=new Date(t);return`${e.getFullYear()}.${e.getMonth()+1}.${e.getDate()} ${`0${e.getHours()}`.slice(-2)}:${`0${e.getMinutes()}`.slice(-2)}:${`0${e.getSeconds()}`.slice(-2)}`}class Box{constructor(e){this.chart=e,this.cursors=["x1","x2","y1","y2"],this.box=null,this.value=null,this.yAxisIndex=0}update(){const e=this.chart.getWidth(),s=this.chart.getHeight(),{left:o,right:a,top:n,bottom:c}=this.chart.getOption().grid[0],p=o==="left"?0:o==="right"?e:o==="center"?e*.5:/%$/.test(o)?e*.01*parseFloat(o):o,u=/%$/.test(a)?e*(1-.01*parseFloat(a)):e-a,h=n==="top"?0:n==="bottom"?s:n==="middle"?s*.5:/%$/.test(n)?s*.01*parseFloat(n):n,x=/%$/.test(c)?s*(1-.01*parseFloat(c)):s-c,i=u-p,l=x-h;this.box={width:i,height:l,x1:p,y1:h,x2:u,y2:x},this.value||(this.value=[.1*i,.9*i,.9*l,.1*l]),this.chart.setOption({graphic:[{id:"box",left:p,top:h,width:i,height:l},...this.cursors.map((r,y)=>r[0]==="y"?{id:r,position:[0,this.value[y]=Math.max(1,Math.min(l-1,this.value[y]))],width:i}:{id:r,position:[this.value[y]=Math.max(1,Math.min(i-1,this.value[y])),0],height:l}),...this.cursors.map(r=>r[0]==="y"?{id:`${r}l`,info:r,shape:{x1:0,x2:i,y1:0,y2:0}}:{id:`${r}l`,shape:{x1:0,x2:0,y1:0,y2:l}})]}),setTimeout(()=>this.displayCursor(),500)}setCursor({target:{position:e}={}},s){const o=this.cursors.indexOf(s);if(o<0)return;const{width:a,height:n}=this.box;this.chart.setOption(s[0]==="y"?{graphic:[{id:s,position:[0,this.value[o]=Math.max(1,Math.min(n-1,this.value[o]+e[1]))]},{id:`${s}l`,position:[0,0]}]}:{graphic:[{id:s,position:[this.value[o]=Math.max(1,Math.min(a-1,this.value[o]+e[0])),0]},{id:`${s}l`,position:[0,0]}]}),this.displayCursor()}displayCursor(){const{x1:e,y1:s}=this.box,[o,a,n,c]=this.value,[p,u]=[o,a].map(i=>this.chart.convertFromPixel("xAxis",i+e)),[h,x]=[n,c].map(i=>this.chart.convertFromPixel({yAxisIndex:this.yAxisIndex},i+s));dispVal({a:p,b:u,1:h,2:x})}}let box;function getText(t){return t[0]==="y"?[{type:"text",silent:!0,left:-16,top:"middle",z:99,style:{text:t[1],fill:"#fff",font:"0.8em sans-serif"}},{type:"polygon",silent:!0,left:-20,top:"middle",cursor:"default",z:98,shape:{points:[[0,0],[-8,8],[-20,8],[-20,-8],[-8,-8]]},style:{fill:CURSOR_COLOR2}}]:[{type:"text",silent:!0,left:"center",top:-18,z:99,style:{text:["a","b"][t[1]-1],fill:"#fff",font:"0.8em sans-serif"}},{type:"polygon",silent:!0,cursor:"default",z:98,left:"center",top:-20,shape:{points:[[0,0],[8,-8],[8,-20],[-8,-20],[-8,-8]]},style:{fill:CURSOR_COLOR}}]}function getCursor(t){return{type:"group",id:t,bounding:"raw",position:[0,0],children:t[0]==="y"?[{id:`${t}l`,type:"line",z:99,draggable:!0,cursor:"row-resize",style:{stroke:CURSOR_COLOR2}},...getText(t)]:[{id:`${t}l`,type:"line",z:99,draggable:!0,cursor:"col-resize",style:{stroke:CURSOR_COLOR}},...getText(t)],ondrag:e=>box.setCursor(e,t)}}const opt={grid:{},xAxis:{type:"time"},yAxis:{type:"value"},series:[{type:"line",showSymbol:!1,data:getData()}],graphic:{type:"group",id:"box",bounding:"raw",children:["x1","x2","y1","y2"].map(getCursor)}};myChart.setOption(opt),box=new Box(myChart),box.update(),window.addEventListener("resize",()=>myChart.resize()+box.update()),document.head.appendChild(document.createElement("style")).innerHTML="#x-result{font-size:13px}b.xtag{font-size:10px;display:inline-block;text-align:center;line-height:16px;width:16px;border-radius:10px;color:#fff;margin-left:5px}b.xdif{margin-left:5px}";const div=document.body.appendChild(document.createElement("div"));div.id="x-result",div.style="position:absolute;bottom:16px;left:40px;right:200px;display:flex;justify-content:space-between";const conf=[{name:"a",color:CURSOR_COLOR},{name:"b",color:CURSOR_COLOR},{name:"1",color:CURSOR_COLOR2},{name:"2",color:CURSOR_COLOR2}];function dispVal(t={}){if(!div)return;const e=[];t.a&&t.b&&e.push([...["a","b"].map(s=>`<b class=xtag style=background:${CURSOR_COLOR}>${s}</b> ${getTimeStr(t[s])}`),`<b class="xdif" style="color:${CURSOR_COLOR}">∆</b> ${+((t.b-t.a)*.001).toFixed(3)} 秒`].join("")),t[1]&&t[2]&&e.push([...["1","2"].map(s=>`<b class=xtag style=background:${CURSOR_COLOR2}>${s}</b> ${+t[s].toFixed(3)}`),`<b class="xdif" style="color:${CURSOR_COLOR2}">∆</b> ${+(t[2]-t[1]).toFixed(3)}`].join("")),div.innerHTML=`<span>${e.join("</span><span>")}</span>`}
